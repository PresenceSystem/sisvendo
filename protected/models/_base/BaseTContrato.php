<?php

/**
 * This is the model base class for the table "tContrato".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "TContrato".
 *
 * Columns in table "tContrato" available as properties of the model,
 * followed by relations of table "tContrato" available as properties of the model.
 *
 * @property string $numero
 * @property string $lugar
 * @property string $fecha_creacion
 * @property integer $id_deudor
 * @property integer $id_formaPago
 * @property string $id_lugarCobro
 * @property integer $id_empresa
 * @property string $total
 * @property string $cuota_inicial
 * @property string $saldo
 * @property string $valor_cuota
 * @property integer $cantidad_cuotas
 * @property string $fecha
 * @property integer $id_usuario
 * @property integer $estado
 * *
 * @property TLugarCobro $idLugarCobro
 * @property TPersona $idDeudor
 * @property TFormaPago $idFormaPago
 * @property TContratoArticulo[] $tContratoArticulos
 * @property TContratoGarante[] $tContratoGarantes
 * @property TCuota[] $tCuotas
 */
abstract class BaseTContrato extends AweActiveRecord {
    //Atributo publico 1,2,3 (principales)
    public $deudor_search;
    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'tContrato';
    }

    public static function representingColumn() {
        return 'numero';
    }

    public function rules() {
        return array(
            array('fecha_creacion, id_deudor, id_formaPago, id_lugarCobro ', 'required'),
            array('estado,id_deudor, id_formaPago, id_empresa, cantidad_cuotas, id_usuario', 'numerical', 'integerOnly'=>true),
            array('lugar', 'length', 'max'=>50),
            array('id_lugarCobro', 'length', 'max'=>11),
            array('total, cuota_inicial, saldo, valor_cuota', 'length', 'max'=>7),
            array('lugar, cuota_inicial, saldo, valor_cuota, cantidad_cuotas, id_usuario', 'default', 'setOnEmpty' => true, 'value' => null),
            array('numero, lugar, fecha_creacion, id_deudor, id_formaPago, id_lugarCobro, id_empresa, total, cuota_inicial, saldo, valor_cuota, cantidad_cuotas, fecha, id_usuario', 'safe', 'on'=>'search'),
            array('numero, lugar, fecha_creacion, id_deudor, id_formaPago, id_lugarCobro, id_empresa, total, cuota_inicial, saldo, valor_cuota, cantidad_cuotas, fecha, id_usuario, estado', 'safe', 'on'=>'searchCobrar'),
            array('deudor_search', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        return array(
            'idLugarCobro' => array(self::BELONGS_TO, 'TLugarCobro', 'id_lugarCobro'),
            'idDeudor' => array(self::BELONGS_TO, 'TPersona', 'id_deudor'),
            'idFormaPago' => array(self::BELONGS_TO, 'TFormaPago', 'id_formaPago'),
            'tContratoArticulos' => array(self::HAS_MANY, 'TContratoArticulo', 'numero_contrato'),
            'tContratoGarantes' => array(self::HAS_MANY, 'TContratoGarante', 'numero_contrato'),
            'tCuotas' => array(self::HAS_MANY, 'TCuota', 'numero_contrato'),
            
            'idUsuario' => array(self::BELONGS_TO, 'Usuario', 'id_usuario'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'numero' => Yii::t('app', 'Número'),
                'lugar' => Yii::t('app', 'Lugar'),
                'fecha_creacion' => Yii::t('app', 'Fecha de creación'),
                'id_deudor' => Yii::t('app', 'Solicitante (Deudor)'),
                'id_formaPago' => Yii::t('app', 'Forma de pago'),
                'id_lugarCobro' => Yii::t('app', 'Lugar de cobro'),
                'id_empresa' => Yii::t('app', 'Empresa'),
                'total' => Yii::t('app', 'Valor total del contrato'),
                'cuota_inicial' => Yii::t('app', 'Cuota inicial'),
                'saldo' => Yii::t('app', 'Saldo'),
                'valor_cuota' => Yii::t('app', 'Valor de cuota'),
                'cantidad_cuotas' => Yii::t('app', 'Cantidad de cuotas'),
                'fecha' => Yii::t('app', 'El: '),
                'id_usuario' => Yii::t('app', 'Modificado por:'),
                'idLugarCobro' => null,
                'idDeudor' => null,
                'idFormaPago' => null,
                'tContratoArticulos' => null,
                'tContratoGarantes' => null,
                'tCuotas' => null,
            
             'deudor_search' => ' Deudor',
        );
    }

    public function search() {
        $criteria = new CDbCriteria;
          $criteria->with = array('idDeudor'); //2 Añadiremos a criteria un “with” con la relación “cODIGO” para sacar en la consulta de los posts la información de éstos junto con la de los usuarios relacionados, en esta  información estará también la del campo “APELLIDO” que es la que nos interesa:
        $criteria->compare('numero', $this->numero, true);
        $criteria->compare('lugar', $this->lugar, true);
        $criteria->compare('fecha_creacion', $this->fecha_creacion, true);
        $criteria->compare('id_deudor', $this->id_deudor);
        $criteria->compare('id_formaPago', $this->id_formaPago);
        $criteria->compare('id_lugarCobro', $this->id_lugarCobro);
        $criteria->compare('id_empresa', $this->id_empresa);
        $criteria->compare('total', $this->total, true);
        $criteria->compare('cuota_inicial', $this->cuota_inicial, true);
        $criteria->compare('saldo', $this->saldo, true);
        $criteria->compare('valor_cuota', $this->valor_cuota, true);
        $criteria->compare('cantidad_cuotas', $this->cantidad_cuotas);
        $criteria->compare('fecha', $this->fecha, true);
        $criteria->compare('id_usuario', $this->id_usuario);

          $criteria->compare('idDeudor.nombre', $this->deudor_search, true); // 3 Para poder realizar búsquedas según el “APELLIDO” del autor del post añadiremos la siguiente comparación:
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            /**/
            'sort' => array(
                'attributes' => array(
                    'deudor_search' => array(
                        'asc' => 'idDeudor.nombre ASC',
                        'desc' => 'idDeudor.nombre DESC',
                    ),
                    '*',
                ),
//                 'defaultOrder'=>'status, update_time DESC',
            ),
                /**/
        ));
        
//        return new CActiveDataProvider($this, array(
//            'criteria' => $criteria,
//        ));
    }
    
    public function searchCobrar() {
        $criteria = new CDbCriteria;
          $criteria->with = array('idDeudor'); //2 Añadiremos a criteria un “with” con la relación “cODIGO” para sacar en la consulta de los posts la información de éstos junto con la de los usuarios relacionados, en esta  información estará también la del campo “APELLIDO” que es la que nos interesa:
        $criteria->compare('numero', $this->numero, true);
        $criteria->compare('lugar', $this->lugar, true);
        $criteria->compare('fecha_creacion', $this->fecha_creacion, true);
        $criteria->compare('id_deudor', $this->id_deudor);
        $criteria->compare('id_formaPago', $this->id_formaPago);
        $criteria->compare('id_lugarCobro', $this->id_lugarCobro);
        $criteria->compare('id_empresa', $this->id_empresa);
        $criteria->compare('total', $this->total, true);
        $criteria->compare('cuota_inicial', $this->cuota_inicial, true);
        $criteria->compare('saldo', $this->saldo, true);
        $criteria->compare('valor_cuota', $this->valor_cuota, true);
        $criteria->compare('cantidad_cuotas', $this->cantidad_cuotas);
        $criteria->compare('fecha', $this->fecha, true);
        $criteria->compare('id_usuario', $this->id_usuario);
        $criteria->compare('estado', 0); //0.- Si saldo >0; y 1.- Si saldo==0

          $criteria->compare('idDeudor.nombre', $this->deudor_search, true); // 3 Para poder realizar búsquedas según el “APELLIDO” del autor del post añadiremos la siguiente comparación:
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            /**/
            'sort' => array(
                'attributes' => array(
                    'deudor_search' => array(
                        'asc' => 'idDeudor.nombre ASC',
                        'desc' => 'idDeudor.nombre DESC',
                    ),
                    '*',
                ),
//                 'defaultOrder'=>'status, update_time DESC',
            ),
                /**/
        ));
        
//        return new CActiveDataProvider($this, array(
//            'criteria' => $criteria,
//        ));
    }
    public function searchPagados() {
        $criteria = new CDbCriteria;
          $criteria->with = array('idDeudor'); //2 Añadiremos a criteria un “with” con la relación “cODIGO” para sacar en la consulta de los posts la información de éstos junto con la de los usuarios relacionados, en esta  información estará también la del campo “APELLIDO” que es la que nos interesa:
        $criteria->compare('numero', $this->numero, true);
        $criteria->compare('lugar', $this->lugar, true);
        $criteria->compare('fecha_creacion', $this->fecha_creacion, true);
        $criteria->compare('id_deudor', $this->id_deudor);
        $criteria->compare('id_formaPago', $this->id_formaPago);
        $criteria->compare('id_lugarCobro', $this->id_lugarCobro);
        $criteria->compare('id_empresa', $this->id_empresa);
        $criteria->compare('total', $this->total, true);
        $criteria->compare('cuota_inicial', $this->cuota_inicial, true);
        $criteria->compare('saldo', $this->saldo, true);
        $criteria->compare('valor_cuota', $this->valor_cuota, true);
        $criteria->compare('cantidad_cuotas', $this->cantidad_cuotas);
        $criteria->compare('fecha', $this->fecha, true);
        $criteria->compare('id_usuario', $this->id_usuario);
        $criteria->compare('estado', 1); //0.- Si saldo >0; y 1.- Si saldo==0

          $criteria->compare('idDeudor.nombre', $this->deudor_search, true); // 3 Para poder realizar búsquedas según el “APELLIDO” del autor del post añadiremos la siguiente comparación:
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            /**/
            'sort' => array(
                'attributes' => array(
                    'deudor_search' => array(
                        'asc' => 'idDeudor.nombre ASC',
                        'desc' => 'idDeudor.nombre DESC',
                    ),
                    '*',
                ),
//                 'defaultOrder'=>'status, update_time DESC',
            ),
                /**/
        ));
        
//        return new CActiveDataProvider($this, array(
//            'criteria' => $criteria,
//        ));
    }
    public function searchVigentes() {
        $criteria = new CDbCriteria;
          $criteria->with = array('idDeudor'); //2 Añadiremos a criteria un “with” con la relación “cODIGO” para sacar en la consulta de los posts la información de éstos junto con la de los usuarios relacionados, en esta  información estará también la del campo “APELLIDO” que es la que nos interesa:
        $criteria->compare('numero', $this->numero, true);
        $criteria->compare('lugar', $this->lugar, true);
        $criteria->compare('fecha_creacion', $this->fecha_creacion, true);
        $criteria->compare('id_deudor', $this->id_deudor);
        $criteria->compare('id_formaPago', $this->id_formaPago);
        $criteria->compare('id_lugarCobro', $this->id_lugarCobro);
        $criteria->compare('id_empresa', $this->id_empresa);
        $criteria->compare('total', $this->total, true);
        $criteria->compare('cuota_inicial', $this->cuota_inicial, true);
        $criteria->compare('saldo', $this->saldo, true);
        $criteria->compare('valor_cuota', $this->valor_cuota, true);
        $criteria->compare('cantidad_cuotas', $this->cantidad_cuotas);
        $criteria->compare('fecha', $this->fecha, true);
        $criteria->compare('id_usuario', $this->id_usuario);
        $criteria->compare('estado', 0); //0.- Si saldo >0; y 1.- Si saldo==0

          $criteria->compare('idDeudor.nombre', $this->deudor_search, true); // 3 Para poder realizar búsquedas según el “APELLIDO” del autor del post añadiremos la siguiente comparación:
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            /**/
            'sort' => array(
                'attributes' => array(
                    'deudor_search' => array(
                        'asc' => 'idDeudor.nombre ASC',
                        'desc' => 'idDeudor.nombre DESC',
                    ),
                    '*',
                ),
//                 'defaultOrder'=>'status, update_time DESC',
            ),
                /**/
        ));
        
//        return new CActiveDataProvider($this, array(
//            'criteria' => $criteria,
//        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}